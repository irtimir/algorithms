"""
M. Просеивание вверх
Ограничение времени	2 секунды
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Напишите функцию, совершающую просеивание вверх в куче на максимум. Гарантируется, что порядок элементов в куче может быть нарушен только элементом, от которого запускается просеивание.
Функция принимает в качестве аргументов массив, в котором хранятся элементы кучи, и индекс элемента, от которого надо сделать просеивание вверх. Функция должна вернуть индекс, на котором элемент оказался после просеивания. Также необходимо изменить порядок элементов в переданном в функцию массиве.
Индексация в массиве, содержащем кучу, начинается с единицы. Таким образом, сыновья вершины на позиции
v
 это
2
v
 и
2
v
+
1
. Обратите внимание, что нулевой элемент в передаваемом массиве фиктивный, вершина кучи соответствует 1-му элементу.
PIC

Формат ввода
Элементы кучи —– целые числа, лежащие в диапазоне от
−
1
0
9
 до
1
0
9
. Все элементы кучи уникальны. Передаваемый в функцию индекс лежит в диапазоне от 1 до размера передаваемого массива. В куче содержится от
1
 до
1
0
5
 элементов.
Замечания про отправку решений
Выберите компилятор make. Решение нужно отправлять в виде файла с расширением, которое соответствует вашему языку программирования. Если вы пишете на Java, имя файла должно быть Solution.java. Для остальных языков назовите файл my_solution.ext, заменив ext на необходимое расширение.
Мы рекомендуем воспользоваться заготовками кода для данной задачи, расположенными по ссылке.
Python
def sift_up(heap: list, idx: int) -> int
C++
#include "solution.h" // Attention!
int siftUp(std::vector<int>& heap, int idx);
Java
public class Solution {
    public static int siftUp(int[] heap, int idx) {
        // your code
    }
}
GO
func siftUp(heap []int, idx int) int;
NodeJS
Пожалуйста, не используйте стрелочную нотацию при определении функции
function siftUp(heap, idx) {
   // Your code
}
"""


def sift_up(heap, idx):
    if idx == 1:
        return idx

    parent_index = idx // 2

    if heap[parent_index] < heap[idx]:
        heap[parent_index], heap[idx] = heap[idx], heap[parent_index]
        return sift_up(heap, parent_index)

    return idx


def test():
    sample = [-1, 12, 6, 8, 3, 15, 7]
    assert sift_up(sample, 5) == 1


def main():
    test()


if __name__ == '__main__':
    main()
