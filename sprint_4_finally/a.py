"""
A. Поисковая система
Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	4 секунды	128Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
Golang 1.14.4 + network	6 секунд	128Mb
Node.js 14.15.5	6.5 секунд	400Mb
Python 3.7.3	6.5 секунд	128Mb
gc go	6 секунд	128Mb
Oracle Java 8	4 секунды	400Mb
OpenJDK Java 11	4 секунды	400Mb
Node JS 8.16	6.5 секунд	400Mb
Тимофей пишет свою поисковую систему.

Имеется n документов, каждый из которых представляет собой текст из слов. По этим документам требуется построить
поисковый индекс. На вход системе будут подаваться запросы. Запрос —– некоторый набор слов. По запросу надо вывести 5
самых релевантных документов.

Релевантность документа оценивается следующим образом: для каждого уникального слова из запроса берётся число его
вхождений в документ, полученные числа для всех слов из запроса суммируются. Итоговая сумма и является релевантностью
документа. Чем больше сумма, тем больше документ подходит под запрос.

Сортировка документов на выдаче производится по убыванию релевантности. Если релевантности документов совпадают —–
то по возрастанию их порядковых номеров в базе (то есть во входных данных).

Формат ввода
В первой строке дано натуральное число n —– количество документов в базе (1 ≤ n ≤ 104).

Далее в n строках даны документы по одному в строке. Каждый документ состоит из нескольких слов, слова отделяются друг
от друга одним пробелом и состоят из маленьких латинских букв. Длина одного текста не превосходит 1000 символов.
Текст не бывает пустым.

В следующей строке дано число запросов —– натуральное число m (1 ≤ m ≤ 104). В следующих m строках даны запросы по
одному в строке. Каждый запрос состоит из одного или нескольких слов. Запрос не бывает пустым. Слова отделяются друг
от друга одним пробелом и состоят из маленьких латинских букв. Число символов в запросе не превосходит 100.

Формат вывода
Для каждого запроса выведите на одной строке номера пяти самых релевантных документов. Если нашлось менее пяти
документов, то выведите столько, сколько нашлось. Документы с релевантностью 0 выдавать не нужно.
"""

import sys


def main():
    search_idx = {}

    for doc_num in range(int(sys.stdin.readline().rstrip())):
        for word in sys.stdin.readline().rstrip().split():
            stats_by_word = search_idx.get(word, {})
            stats_by_word[doc_num] = stats_by_word.get(doc_num, 0) + 1
            search_idx[word] = stats_by_word

    for _ in range(int(sys.stdin.readline().rstrip())):
        stats = {}
        for word in set(sys.stdin.readline().rstrip().split()):
            for doc_num, count in search_idx.get(word, {}).items():
                stats[doc_num] = count + stats.get(doc_num, 0)

        res = sorted(stats.items(), reverse=True, key=lambda i: (i[1], -i[0]))
        print(*map(lambda i: i[0] + 1, res[:5]))


if __name__ == '__main__':
    main()
