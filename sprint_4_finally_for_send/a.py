"""
Run id: 53505720

-- ПРИНЦИП РАБОТЫ --
В первую очередь наполняем индекс для поиска элементов, его структура следующая:
{<слово>:{<номер документа>: <количество повторений в документе>}}
Далле последовательно обрабатываем запросы собирая статистику по каждому слову из запроса, обращаясь к сформированному
поисковому индексу. Далее сортируем массив полученных баллов в обратном порядке и выводим на экран первые 5 элементов.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
За основу поискового индекса взята струтура данных dict, она гарантирует уникальность ключей, таким образом гарантируем
правильный подсчёт количества слов в документе.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Сбор индекса составляет для одного документа составляет O(W) времени при W количестве слов в документе, таким образом
сбор индекса занимает O(N) времени при N документах.
Подсчёт статистики составляет O(W) времени при W слов в запросе, таким образом
подсчёт статистики занимает O(N) времени при N документах.
Общая временная сложность алгоритма O(N).

Подобно классическому бинарному поиску в упорядоченном списке, происходит деление массива на 2 части по среднему
индексу, таким образом, сложность сохраняется и явряется O(logN).

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Оперативная память используется для хранения каждого уникального слова в документе и статистику для каждого документа,
таким образом, используется O(N) памяти
"""

import sys


def main():
    search_idx = {}
    top_count = 5

    for doc_num in range(int(sys.stdin.readline().rstrip())):
        for word in sys.stdin.readline().rstrip().split():
            stats_by_word = search_idx.get(word, {})
            stats_by_word[doc_num] = stats_by_word.get(doc_num, 0) + 1
            search_idx[word] = stats_by_word

    for _ in range(int(sys.stdin.readline().rstrip())):
        stats = {}
        for word in set(sys.stdin.readline().rstrip().split()):
            for doc_num, count in search_idx.get(word, {}).items():
                stats[doc_num] = count + stats.get(doc_num, 0)

        doc_num_idx = 0
        doc_count_idx = 1
        res = sorted(stats.items(), reverse=True, key=lambda i: (i[doc_count_idx], -i[doc_num_idx]))
        print(*map(lambda i: i[doc_num_idx] + 1, res[:top_count]))


if __name__ == '__main__':
    main()
