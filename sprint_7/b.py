"""
B. Расписание
Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	0.075 секунд	64Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
Node.js 14.15.5	0.3 секунды	64Mb
Mono C# 5.2.0	0.3 секунды	64Mb
Oracle Java 8	0.3 секунды	64Mb
OpenJDK Java 11	0.3 секунды	64Mb
Node JS 8.16	0.3 секунды	64Mb
Дано количество учебных занятий, проходящих в одной аудитории. Для каждого из них указано время начала и конца. Нужно
составить расписание, в соответствии с которым в классе можно будет провести как можно больше занятий.

Если возможно несколько оптимальных вариантов, то выведите любой. Возможно одновременное проведение более чем одного
занятия нулевой длительности.

Формат ввода
В первой строке задано число занятий. Оно не превосходит 1000. Далее для каждого занятия в отдельной строке записано
время начала и конца, разделённые пробелом. Время задаётся одним целым числом h, если урок начинается/заканчивается
ровно в h часов. Если же урок начинается/заканчивается в h часов m минут, то время записывается как h.m. Гарантируется,
что каждое занятие начинается не позже, чем заканчивается. Указываются только значащие цифры.

Формат вывода
Выведите в первой строке наибольшее число уроков, которое можно провести в аудитории. Далее выведите время начала и
конца каждого урока в отдельной строке в порядке их проведения.
"""

import sys
from collections import namedtuple
from decimal import Decimal


Time = namedtuple('Time', ('start', 'end'))


def main():
    n = int(sys.stdin.readline().rstrip())

    times = []

    for _ in range(n):
        times.append(Time(*map(Decimal, sys.stdin.readline().rstrip().split())))

    times.sort(key=lambda i: (i.end, -(i.end - i.start)))

    result = []
    last_time = None

    for time in times:
        if last_time is None or time.start >= last_time:
            result.append(time)
            last_time = time.end

    print(len(result))

    for time in result:
        print(str(time.start), str(time.end))


if __name__ == '__main__':
    main()
