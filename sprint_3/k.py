"""
Гоше дали задание написать красивую сортировку слиянием. Поэтому
Гоше обязательно надо реализовать отдельно функцию merge и функцию merge_sort.
* Функция merge принимает два отсортированных массива, сливает их в один отсортированный массив и возвращает его.
Если требуемая сигнатура имеет вид merge(array, left, mid, right), то первый массив задаётся полуинтервалом
[left,mid) массива array, а второй – полуинтервалом [mid)
* Функция merge_sort принимает некоторый подмассив, который нужно отсортировать.
Подмассив задаётся полуинтервалом — его началом и концом. Функция должна отсортировать передаваемый в неё подмассив, она ничего не возвращает.
* Функция merge_sort разбивает полуинтервал на две половинки и рекурсивно вызывает сортировку отдельно для каждой.
Затем два отсортированных массива сливаются в один с помощью merge.
Заметьте, что в функции передаются именно полуинтервалы [begin,end), то есть правый конец не включается.
Например, если вызвать merge_sort(arr, 0, 4), где arr=[4,5,3,0,1,2], то будут отсортированы только первые
четыре элемента, изменённый массив будет выглядеть как arr=[0,3,4,5,1,2].
Реализуйте эти две функции.
Мы рекомендуем воспользоваться заготовками кода для данной задачи, расположенными по ссылке.

Формат ввода
Передаваемый в функции массив состоит из целых чисел, не превосходящих по модулю 109.
Длина сортируемого диапазона не превосходит 105.
"""


def merge(arr, lf, mid, rg):
    l, r = lf, mid

    merged = []

    while l < mid and r < rg:
        if arr[l] <= arr[r]:
            merged.append(arr[l])
            l += 1
        else:
            merged.append(arr[r])
            r += 1

    for i in range(l, mid):
        merged.append(arr[i])

    for i in range(r, rg):
        merged.append(arr[i])

    return merged


def merge_sort(arr, lf, rg):
    if rg - lf == 1:
        pass
    elif rg - lf == 2:
        if arr[lf] > arr[rg - 1]:
            arr[lf], arr[rg - 1] = arr[rg - 1], arr[lf]
    else:
        mid = lf + (rg - lf) // 2
        merge_sort(arr, lf, mid)
        merge_sort(arr, mid, rg)

        tmp = merge(arr, lf, mid, rg)

        for i in range(lf, rg):
            arr[i] = tmp[i - lf]


def test():
    a = [1, 4, 9, 2, 10, 11]
    b = merge(a, 0, 3, 6)
    expected = [1, 2, 4, 9, 10, 11]
    assert b == expected
    assert merge([1, 0], 0, 1, 2) == [0, 1]
    assert merge([1, 2, 1, 3, 5], 0, 2, 5) == [1, 1, 2, 3, 5]
    assert merge([1, 2, 1, 3, 5], 0, 2, 4) == [1, 1, 2, 3]

    c = [1, 4, 2, 10, 1, 2]
    merge_sort(c, 0, 6)
    expected = [1, 1, 2, 2, 4, 10]
    assert c == expected


if __name__ == '__main__':
    test()
